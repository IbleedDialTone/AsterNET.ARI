<#@ template debug="true" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.linq" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="$(ProjectDir)bin\Debug\ARICodeGen.exe" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Newtonsoft.Json.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft" #>
<#@ import namespace="ARICodeGen" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>
<#
// System.Diagnostics.Debugger.Launch();
var manager = TemplateFileManager.Create(this);
var files = new List<string>() { 
	@"D:\Projects\Codeplex\AsterNET.ARI\ARICodeGen\bin\Debug\Data\Bridges.json",
	@"D:\Projects\Codeplex\AsterNET.ARI\ARICodeGen\bin\Debug\Data\Channels.json",
	@"D:\Projects\Codeplex\AsterNET.ARI\ARICodeGen\bin\Debug\Data\Asterisk.json",
	@"D:\Projects\Codeplex\AsterNET.ARI\ARICodeGen\bin\Debug\Data\Events.json",
	@"D:\Projects\Codeplex\AsterNET.ARI\ARICodeGen\bin\Debug\Data\Applications.json",
	@"D:\Projects\Codeplex\AsterNET.ARI\ARICodeGen\bin\Debug\Data\Endpoints.json",
	@"D:\Projects\Codeplex\AsterNET.ARI\ARICodeGen\bin\Debug\Data\DeviceStates.json",
	@"D:\Projects\Codeplex\AsterNET.ARI\ARICodeGen\bin\Debug\Data\Playbacks.json",
	@"D:\Projects\Codeplex\AsterNET.ARI\ARICodeGen\bin\Debug\Data\Sounds.json",
	@"D:\Projects\Codeplex\AsterNET.ARI\ARICodeGen\bin\Debug\Data\Recordings.json"
};
var events = new List<string>();
#>

<#	
foreach (var file in files)
{
	var subtypes = new Dictionary<string, List<string>>();

	using (StreamReader reader = File.OpenText(Host.ResolvePath(file)))
	{
#>
<#
		//
		// Start Model Output
		//
		var o = (Newtonsoft.Json.Linq.JObject)JToken.ReadFrom(new JsonTextReader(reader));
		var models = o["models"];

        foreach (var item in models.Values())
        {
			// if class exists in subtypes, extend
			var inherit = subtypes.Where(x => x.Value.Contains(item.SelectToken("id").Value<string>())).SingleOrDefault().Key;
			var className = item.SelectToken("id").Value<string>();
			if(inherit == "Event")
			{
				className += "Event";
				events.Add(className);
            }

			// create new file
			manager.StartNewFile(className + ".cs");
#>
using System;
using System.Collections.Generic;

namespace AsterNET.ARI.Models
{
	/// <summary>
	/// <#= item.SelectToken("description", false) !=null ? item.SelectToken("description").Value<string>().Replace("\n", " ") : "no desciption" #>
	/// </summary>
	public class <#= className #> <#= !string.IsNullOrEmpty(inherit) ? string.Format(" : {0}", inherit) : "" #>
	{
<# 
			foreach (var prop in item.SelectToken("properties"))
			{
				var jProp = ((JProperty)prop);

#>
		/// <summary>
		/// <#= prop.First().SelectToken("description", false) !=null ? prop.First().SelectToken("description", false).Value<string>().Replace("\n", " ") : "no description provided" #>
		/// </summary>
		public <#= ARICodeGen.SwaggerHelper.TypeConvert(prop.First().SelectToken("type").Value<string>()) #> <#= ARICodeGen.SwaggerHelper.GetSafeName(jProp.Name) #> { get; set; }

<#
			}
			// check for subtypes
			try {
				foreach (JValue prop in item.SelectToken("subTypes"))
				{
	
					if(!subtypes.ContainsKey(item.SelectToken("id").Value<string>())) {
						subtypes.Add(item.SelectToken("id").Value<string>(), new List<string>()); 
					}
					subtypes[item.SelectToken("id").Value<string>()].Add(prop.ToString());
				}
			}
			catch{}
#>
	}
}
<#
		}
#>
<#

		//
		// Start Actions Output
		//
		var apis = o["apis"];
		var filename = System.IO.Path.GetFileNameWithoutExtension(file);
		var actionClassName = filename + "Actions";
		
		manager.StartNewFile(actionClassName + ".cs");
#>
using System;
using System.Collections.Generic;
using AsterNET.ARI.Models;
using AsterNET.ARI;
using RestSharp;

namespace AsterNET.ARI.Actions
{
	
	public class <#= actionClassName #> : ARIBaseAction
	{

		public <#= actionClassName #>(StasisEndpoint endPoint)
			: base(endPoint)
		{}

<#
		// Get each operation
		foreach (var item in apis)
		{
			var path = item.SelectToken("path").Value<string>();
			var operations = item.SelectToken("operations");
			
			foreach(var op in operations) 
			{
				
				var methodName = op.SelectToken("nickname").Value<string>();
				var description = op.SelectToken("summary").Value<string>();
				var httpMethod = op.SelectToken("httpMethod").Value<string>();
			
				var responseType = ARICodeGen.SwaggerHelper.TypeConvert(op.SelectToken("responseClass").Value<string>());

				var parameters = string.Empty;
			
				try {
					foreach(var param in op.SelectToken("parameters")) {
						// string defaultValue = param.SelectToken("defalutValue").Value<string>()
						parameters += string.Format("{2}{1} {0}", param.SelectToken("name").Value<string>(), ARICodeGen.SwaggerHelper.TypeConvert(param.SelectToken("dataType").Value<string>()), parameters.Length > 0 ? ", " : "");
					}
				}catch(Exception ex){
					Trace.WriteLine(ex.ToString());
				}

#>
		/// <summary>
		/// <#= description ?? "no description provided" #>
		/// </summary>
<# 
				try {
					foreach(var param in op.SelectToken("parameters")) {
#>
		/// <param name="<#= param.SelectToken("name").Value<string>() #>"><#= param.SelectToken("description").Value<string>() #></param>
<#
					}
                }catch{}
#>
		public <#= responseType #> <#= ARICodeGen.SwaggerHelper.GetSafeName(methodName) #>(<#= parameters #>)
		{
			string path = "<#= path #>";
			var request = GetNewRequest(path, Method.<#= httpMethod.ToUpper() #>);
<# 
			try {
				foreach(var param in op.SelectToken("parameters")) {
					if(param.SelectToken("paramType").Value<string>() == "path"){
#>
			request.AddUrlSegment("<#= param.SelectToken("name").Value<string>() #>", <#= param.SelectToken("name").Value<string>() #>);
<# 
					}else{
#>
			request.AddParameter("<#= param.SelectToken("name").Value<string>() #>", <#= param.SelectToken("name").Value<string>() #>, ParameterType.QueryString);
<#
					}

				}
			}catch(Exception ex){
					Trace.WriteLine(ex.ToString());
			}
			if(responseType == "void") {
#>
			var response = Client.Execute(request);
		}
<#			}else{#>

			var response = Client.Execute<<#= responseType #>>(request);

			if((int)response.StatusCode >= 200 && (int)response.StatusCode < 300)
				return response.Data;

			switch((int)response.StatusCode)
            {
<#  
			try {
				foreach(var errorCode in op.SelectToken("errorResponses")) {
#>
				case <#= errorCode.SelectToken("code").Value<string>() #>:
					throw new ARIException("<#= errorCode.SelectToken("reason").Value<string>() #>");
					break;
<#  
				}
			}catch{}
        
#>
				default:
					// Unknown server response
					throw new ARIException(string.Format("Unknown response code {0} from ARI.", response.StatusCode.ToString()));
            }
		}
<#			} #>
<#		} 
		
	}
	//
	// end of for on operations 
	//
#>
	}
}

<#
	} 
}
	manager.StartNewFile("ARIClient.cs");
#>

using System;
using System.Collections.Generic;
using AsterNET.ARI.Models;

namespace AsterNET.ARI
{
<#
	foreach (var evt in events)
    {
#>
	public delegate void <#= evt + "Handler"#>(object sender, <#= evt #> e);
<#
    }
#>
	public delegate void UnhandledEventHandler(object sender, AsterNET.ARI.Models.Event eventMessage);

	/// <summary>
	/// 
	/// </summary>
	public partial class BaseARIClient_1_0_0
	{
<#
	System.Diagnostics.Debug.WriteLine("event count " + events.Count);
    foreach (var evt in events)
    {
#>
		public event <#= evt + "Handler"#> On<#= evt #>;
<#
    }
#>
		public event UnhandledEventHandler OnUnhandledEvent;		
		
		protected void FireEvent(string eventName, object eventArgs)
		{
		
			switch(eventName) 
			{
<#int i = 1;
	foreach (var evt in events)
    {
		
#>			
			
				case "<#= evt.Replace("Event", "") #>":
					if(On<#= evt #> != null)
						On<#= evt #>(this, (<#= evt #>)eventArgs);
					break;
<#
		i++;
    }
#>
				default:
					if(OnUnhandledEvent!=null)
						OnUnhandledEvent(this, (Event)eventArgs);
					break;
			}
		}
	}
}
<#

manager.Process();
#>